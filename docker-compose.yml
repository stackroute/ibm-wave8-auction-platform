version: "2.1"
services:

  mongo:
    image: mongo:3.4-jessie
    ports:
      - 27017:27017
    container_name: mongo
    network_mode: host
    hostname: localhost
    restart: always
    volumes:
      - /DB/mongo:/data/db
    healthcheck:
      test: "exit 0"

  neo4j:
    image: neo4j:latest
    ports:
      - 7474:7474
      - 7687:7687
    container_name: neo4j
    network_mode: host
    hostname: localhost
    restart: always
    volumes:
      - /DB/neo4j/data:/data
      - /DB/neo4j/import:/import
    healthcheck:
      test: "exit 0"

  mysql:
    image: mysql:5.7
    ports:
      - 3306:3306
    container_name: mysql
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: bootdb
      MYSQL_PASSWORD: Root@123
      MYSQL_USER: root
    network_mode: "host"
    hostname: localhost
    restart: always
    volumes:
      - /DB/mysql:/var/lib/mysql
    healthcheck:
      test: "exit 0"

  redis:
    image: redis:latest
    container_name: "redis"
    command: redis-server --appendonly yes
    volumes:
      - /data/redis:/data
    ports:
      - 6379:6379
    restart: always
    healthcheck:
      test: "exit 0"

  zookeeper:
    image: wurstmeister/zookeeper
    container_name: zookeeper
    network_mode: "host"
    hostname: localhost
    ports:
      - 2181:2181
    restart: always
    healthcheck:
      test: "exit 0"

  kafka:
    image: wurstmeister/kafka
    container_name: kafka
    network_mode: "host"
    hostname: localhost
    ports:
      - 9092:9092
    depends_on:
      zookeeper:
        condition: service_healthy
    environment:
      KAFKA_ZOOKEEPER_CONNECT: 'localhost:2181'
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_CREATE_TOPICS: "test"
    restart: always
    healthcheck:
      test: "exit 0"

  registration:
    image: registration-service
    build: ./registrationMicroservice
    container_name: registration
    restart: always
    network_mode: host
    hostname: localhost
    depends_on:
      mongo:
        condition: service_healthy
      kafka:
        condition: service_healthy
    ports:
      - 8090:8090
    healthcheck:
      test: "exit 0"

  auth:
    image: auth-service
    build: ./authenticationMicroservice
    container_name: auth
    restart: always
    network_mode: host
    hostname: localhost
    depends_on:
      mysql:
        condition: service_healthy
      kafka:
        condition: service_healthy
    ports:
      - 8082:8082
    volumes:
      - /DB/resources:/DB/resources
    healthcheck:
      test: "exit 0"

  bidding:
    image: bidding-service
    build: ./biddingMicroservice/
    container_name: bidding
    restart: always
    network_mode: host
    hostname: localhost
    depends_on:
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    ports:
      - 8081:8081
    healthcheck:
      test: "exit 0"

  recommendation:
    image: recommendation-service
    build: ./recommendationMicroservice/
    container_name: recommendation
    restart: always
    network_mode: host
    hostname: localhost
    depends_on:
      neo4j:
        condition: service_healthy
      kafka:
        condition: service_healthy
    ports:
      - 8084:8084
    healthcheck:
      test: "exit 0"

  search:
    image: search-service
    build: ./searchMicroservice/
    container_name: search
    restart: always
    network_mode: host
    hostname: localhost
    depends_on:
      mongo:
        condition: service_healthy
      kafka:
        condition: service_healthy
    ports:
      - 8070:8070
    healthcheck:
      test: "exit 0"

  # mashup-frontend:
  #   image: mashup-frontend
  #   build: ./mashup-frontend/
  #   container_name: frontend
  #   restart: always
  #   network_mode: host
  #   hostname: localhost
  #   ports:
  #     - 8030:8030
  #   expose:
  #     - 8030
  #   healthcheck:
  #     test: "exit 0"